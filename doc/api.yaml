openapi:  3.0.3
info: 
  title: Wasa Photo - OpenAPI
  description: |
    API for sharing photos.
    
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time) and how many likes and comments it has. The stream is composed by photos from “following” (other users that the user follows). Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any image (even those uploaded by themself). Only authors can remove their comments. Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about Alice. Alice can decide to remove the ban at any moment. Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse chronological order), how many photos have been uploaded, and the user’s followers and following. Users can change their usernames, upload photos, remove photos, and follow/unfollow other users. Removal of an image will also remove likes and comments.
      A user can search other user profiles via username
  version: 1.0.1

 
      
components:

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  parameters:

    username:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 5
        maxLength: 16
      name: username
      in: path
      required: true
      description: identifier for users
    
    followUsername:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 5
        maxLength: 16
      name: followUsername
      in: path
      required: true
      description: identifier for users to follow
      
    
    banUsername:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 5
        maxLength: 16
      name: banUsername
      in: path
      required: true
      description: identifier for users to ban
    
    likeUsername:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 5
        maxLength: 16
      name: likeUsername
      in: path
      required: true
      description: identifier for users of like
    
    commentUsername:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 5
        maxLength: 16
      name: commentUsername
      in: path
      required: true
      description: identifier for users to ban
    
    
    pid:
      schema: 
        description: Int64 between 0-9999
        type: integer
        format: int64
        example : 999
        readOnly: true
      name: pid
      in: path
      description: A photo unique identifier
      required: true
       
    
    
    
    
    
  schemas:
  
    User:
      title: User
      description: this objects represents a single user
      type: object
      properties:
        uid:
          description: identifier of the user
          type: integer
          format: int64
          example: 999
        username:
          type: string
          example: SiweiHu
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          readOnly: false
          
    uid:
      title: uid
      type: integer
      description: identifier
      
        
    Photo:
      title: Photo
      description: this object represents a single photo
      type: object
      properties:
        id:
          description: the identifier of the photo
          type: integer
          format: int64
          readOnly: true
          example: 1

        upload_datetime:
          description: the date of the uploation of the Photo
          format: date-time
          example: 17/01/2022 12:20
        likes:
          description: numbers of likes
          type: integer
          example: 245
        comments:
          description: number of comments
          type: integer
          example: 117
    
    Comment:
      title: Comment
      description: this object represents a single comment 
      type: object
      properties:
        id:
          description: the identifier of the comment
          type: integer
          format: int64
          example: 999
        username:
          description: the username of the user that commented
          type: string
        text:
          description: the text of the comment
          type: string
            
    
    Profile:
      title: Profile
      description: represents the user profile
      type: object
      properties:
        username:
          type: string
          pattern: '^.*?$'
          example: SiweiHu
          minLength: 5
          maxLength: 16
        n_photos:
          description: number of photos published by the user
          type: integer
          example: 1
        n_followers:
          description: number of followers of the user
          type: integer
          example: 1
        n_following:
          description: number of other users followed by the user
          type: integer
          example: 1
    
    Follow:
      title: Follow 
      description: Follow schema.
      type: object
      properties:
        followedUser:
          description: Unique user username.
          type: string
          pattern: '^.*?$'
          example: Siwei
          minLength: 3
          maxLength: 16
        userId:
          description: Unique user username.
          type: string
          pattern: '^.*?$'
          example: Leo
          minLength: 3
          maxLength: 16
    
    Ban:
      title: Ban
      description: Ban schema.
      type: object
      properties:
        bannedUser:
          description: Unique user username.
          type: string
          pattern: '^.*?$'
          example: Siwei
          minLength: 3
          maxLength: 16
        userId:
          description: Unique user username.
          type: string
          pattern: '^.*?$'
          example: Alessio
          minLength: 3
          maxLength: 16
            
          
          
tags:
  - name: photo
    description: Everything about your photos

  - name: user
    description: Operations about user          
          
          
    
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema: 
              type: string
              example: SiweiHu
              pattern: '^.*?$'
              minLength: 3
              maxLength: 16
              
        required: true
      responses:
        '201':
          description: User log-in action successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  identifier:
                  # change here if you decide to use an integer
                  # or any other type of identifier
                    type: string
                    example: "abcdef012345"
                    
      
                
  
  /users/{username}/homepage:
    parameters:
      - $ref:  "#/components/parameters/username"
    get:
      security:
        - bearerAuth: []         # use the same name as above
      tags:
        - photo
      operationId: getMyStream
      summary: returns a stream of photos
      description: |
        the returned stream of photos is in reverse chronogical order and it's 
        from the followed users
      responses:
        '200':
          description: stream of photos successfully obtained
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Photo"}
                minItems: 0
                maxItems: 99999
              
  
  /users/{username}:
    parameters:
       - $ref: "#/components/parameters/username"
    
    get:
      security:
        - bearerAuth : []
      tags:
        - user
      operationId: getUserProfile
      summary: returns the profile of the user
      description: | 
        the returned profile shows photos, number of photos uploaded, followers and following
      
      responses:
        '200':
          description: profile informations successfully obtained
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile"}
        "400": 
          description: The request was not compliant with the documentation (eg. missing fields, etc).
        "404": 
          description: User not found 
        "500": 
          description: The server encountered an internal error. Further info in server logs.
  

    put:
      security:
        - bearerAuth: []
      tags:
        - user
      operationId: setMyUserName
      summary: set the username specified by the userin the request
      requestBody:
        content:
          application/json:
            schema: 
                type: string
                example: SiweiHu
                pattern: '^.*?$'
                minLength: 3
                maxLength: 16
      responses:
        "200":
          description: Username updated successfully
          content:
            application/json:
              schema: 
                type: string
                example: SiweiHu
                pattern: '^.*?$'
                minLength: 3
                maxLength: 16
        "400": 
          description: The request was not compliant with the documentation (eg. missing fields, etc).
        "500": 
          description: The server encountered an internal error. Further info in server logs.
        
  
  
  
  
  
  /users/{username}/photos/:
    parameters: 
      - $ref: "#/components/parameters/username"
      
    post:
      security:
        - bearerAuth: []
      tags:
        - photo
      operationId : uploadPhoto
      summary: upload a new photo
      description: |
        adding a new photo with a new id created
        actually a user can upload the same picture twice or multiple time but each photo will have a different id
      requestBody:
        required: true
        content:
          image/*:
            schema:
              description: Image schema
              type: object
              properties:
                file:
                  type: string
                  format: binary
                  minLength: 0
                  maxLength: 99999
      responses:
        '201':
          description: new photo uloaded successfully
          content:
            image/png:
              schema:
                type: string
                format: binary
    
          
  
  /users/{username}/photos/{pid}: 
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/pid"
    
    get:
      security:
        - bearerAuth : []
      tags:
        - photo
      summary: Get photo details
      description: Retrieve details of a specific photo
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Photo" }
    
    delete:
      security:
        - bearerAuth: []
      tags:
        - photo
      operationId: deletePhoto
      summary: delete a photo
      description: |
        delete a photo with the corrisponding id from user's own profile
      responses:
        "204": 
          description: Photo deleted successfully 
        "400": 
          description: The request was not compliant with the documentation (eg. missing fields, etc).
        "404": 
          description: photo not found 
        "500": 
          description: The server encountered an internal error. Further info in server logs.


  /users/{username}/photos/{pid}/likes/{likeUsername}:
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/pid"
      - $ref: "#/components/parameters/likeUsername"
    
    put:
      security:
          - bearerAuth: []
      tags:
        - photo
      operationId: likePhoto
      summary: put a like to a photo
      description: id of the user of like will be added to the collection likes
      responses:
        '201':
          description:  operation successfull
          content:
            application/json:
              schema: { $ref : "#/components/schemas/uid"}
              
              
    delete:
      security:
          - bearerAuth: []
      tags:
        - photo
      operationId: unlikePhoto
      summary: remove a like to a photo
      description: id of the user will be deleted from the collection likes
      responses:
        '204':
          description:  operation successfull
          
  
  /users/{username}/following/{followUsername}: 
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/followUsername"
    put:
      security:
          - bearerAuth: []
      tags:
        - user
      operationId: followUser
      summary: follow a user
      description: id of the user to follow will be added to the collection following
      responses:
        '201':
          description:  operation successfull
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Follow"}
              
    delete:
      security:
          - bearerAuth: []
      tags:
        - user
      operationId: unfollowUser
      summary: remove a user from following
      description: id of the user will be deleted from the collection following
      responses:
        '204':
          description:  operation successfull
          

          
  /users/{username}/photos/{pid}/comments/:
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/pid"
      
    post:
      security:
        - bearerAuth: []
      tags:
        - photo
      operationId : commentPhoto
      summary: add comment to a photo
      description: |
        adding a new comment to a photo
      requestBody:
        content:
          application/json:
            schema: { $ref : "#/components/schemas/Comment"}
      responses:
        '201':
          description: new comment added successfully
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Comment"}
              
              
  /users/{username}/photos/{pid}/comments/{commentUsername}:
  
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/pid"
      - $ref: "#/components/parameters/commentUsername"
      
    delete:
      security:
          - bearerAuth: []
      tags:
        - photo
      operationId: uncommentPhoto
      summary: remove a comment to a photo
      description: cid of the comment will be deleted from the collection comments
      responses:
        '204':
          description:  operation successfull
          

              
  /users/{username}/banned/{banUsername}:
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/banUsername"
    
    put:
      security:
          - bearerAuth: []
      tags:
        - user
      operationId: banUser
      summary: ban a user
      description: id of the user to ban will be added to the collection banned
      responses:
        '201':
          description:  operation successfull
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Ban"}
              
    delete:
      security:
          - bearerAuth: []
      tags:
        - user
      operationId: unbanUser
      summary: remove a user from banned
      description: id of the user will be deleted from the collection banned
      responses:
        '204':
          description:  operation successfull

   

              
              
              
              
              
              
              
                
              
              
#              
        
