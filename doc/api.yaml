openapi:  3.0.3
info: 
  title: Wasa Photo - OpenAPI
  description: |
    API for sharing photos.
    
    Each user will be presented with a stream of photos (images) in reverse chronological order, with information about when each photo was uploaded (date and time) and how many likes and comments it has. The stream is composed by photos from “following” (other users that the user follows). Users can place (and later remove) a “like” to photos from other users. Also, users can add comments to any image (even those uploaded by themself). Only authors can remove their comments. Users can ban other users. If user Alice bans user Eve, Eve won’t be able to see any information about Alice. Alice can decide to remove the ban at any moment. Users will have their profiles. The personal profile page for the user shows: the user’s photos (in reverse chronological order), how many photos have been uploaded, and the user’s followers and following. Users can change their usernames, upload photos, remove photos, and follow/unfollow other users. Removal of an image will also remove likes and comments.
      A user can search other user profiles via username
  version: 1.0.1

 
      
components:

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

  parameters:

    username:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 3
        maxLength: 16
      name: username
      in: path
      required: true
      description: username for users
    
    followUsername:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 3
        maxLength: 16
      name: followUsername
      in: path
      required: true
      description: username for users to follow
      
    
    banUsername:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 3
        maxLength: 16
      name: banUsername
      in: path
      required: true
      description: username for users to ban
    
    likeUsername:
      schema:
        description: username schema.
        type: string
        pattern: '^.*?$'
        example: SiweiHu
        minLength: 3
        maxLength: 16
      name: likeUsername
      in: path
      required: true
      description: identifier for users of like
    
    cid:
      schema: 
        description: Int64 between 0-9999
        type: integer
        format: int64
        example : 999
        readOnly: true
      name: cid
      in: path
      description: A comment unique identifier
      required: true
    
    
    pid:
      schema: 
        description: Int64 between 0-9999
        type: integer
        format: int64
        example : 999
        readOnly: true
      name: pid
      in: path
      description: A photo unique identifier
      required: true
       
    
  responses: 
    UnauthorizedStatus:
      description: requester is not authorized or access token is not valid or expired
    BadRequestError:
      description: The request was not compliant with the documentation (eg. missing fields, etc).
    InternalServerError:
      description: The server encountered an internal error. Further info in server logs.  
    NotFoundError:
      description: the requesting data is not found
    StatusForbidden:
      description: not allowed to visit
    
    
  schemas:
  
    User:
      title: User
      description: this objects represents a single user
      type: object
      properties:
        uid:
          description: identifier of the user
          type: integer
          format: int64
          example: 999
        username:
          description: username for users
          type: string
          example: SiweiHu
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
          readOnly: false
      
        
    Photo:
      title: Photo
      description: this object represents a single photo
      type: object
      properties:
        id:
          description: the identifier of the photo
          type: integer
          format: int64
          readOnly: true
          example: 1
        uid:
          description: the id of the user that uploadeded the photo
          type: integer
          format: int64
          readOnly: true
          example: 1
          
        username:
          description: the username of the user that uploaded the photo
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        file: 
            description: Base64 encoded string of file
            type: string
            format: byte
            minLength: 1
            maxLength: 9999

        upload_datetime:
          description: the date of the uploation of the Photo
          format: date-time
          example: 13/2/2024, 17:23:16
        likes:
          description: numbers of likes
          type: integer
          example: 245
        comments:
          description: number of comments
          type: integer
          example: 117
        isLiked:
          description: boolean variable to verify if the photo is already liked
          type: boolean
          example: false
    
    Comment:
      title: Comment
      description: this object represents a single comment 
      type: object
      properties:
        id:
          description: the identifier of the comment
          type: integer
          format: int64
          example: 999
        
        uid:
          description: the id of the user that commented the photo
          type: integer
          format: int64
          readOnly: true
          example: 1
          
        username:
          description: the username of the user that commented
          type: string
          pattern: '^.*?$'
          minLength: 3
          maxLength: 16
        
        pid:
          description: the identifier of the photo
          type: integer
          format: int64
          readOnly: true
          example: 1
        puid:
          description: the id of the user that uploaded the photo
          type: integer
          format: int64
          readOnly: true
          example: 1 
          
        text:
          description: the text of the comment
          type: string
          pattern: '^.*?$'
          minLength: 0
          maxLength: 999
    
    Like:
      title: Like
      description: this object represents a single comment 
      type: object
      properties:
        id:
          description: the identifier of the like
          type: integer
          format: int64
          example: 999
        uid:
          description: the id of the user that liked the photo
          type: integer
          format: int64
          readOnly: true
          example: 1
        pid:
          description: the identifier of the photo
          type: integer
          format: int64
          readOnly: true
          example: 1
        puid:
          description: the id of the user that uploaded the photo
          type: integer
          format: int64
          readOnly: true
          example: 1  
        
          
            
    
    Profile:
      title: Profile
      description: represents the user profile
      type: object
      properties:
        uid:
          description: the id of the user
          type: integer
          format: int64
          readOnly: true
          example: 1
        username:
          description: username for users
          type: string
          pattern: '^.*?$'
          example: SiweiHu
          minLength: 3
          maxLength: 16
        n_photos:
          description: number of photos published by the user
          type: integer
          example: 1
        n_followers:
          description: number of followers of the user
          type: integer
          example: 1
        n_following:
          description: number of other users followed by the user
          type: integer
          example: 1
        n_banned:
          description: number of user banned by the user
          type: integer
          example: 1
        isFollowed:
          description: boolean variable to verify if the user is already followed
          type: boolean
          example: false
        isBanned:
          description: boolean variable to verify if the photo is already banned
          type: boolean
          example: false
    
    Follow:
      title: Follow 
      description: Follow schema.
      type: object
      properties:
        followedUser:
          description: Unique user identifier.
          type: integer
          example: 1
        userId:
          description: Unique user identifier
          type: integer
          example: 1
    
    Ban:
      title: Ban
      description: Ban schema.
      type: object
      properties:
        bannedUser:
          description: Unique user identifier.
          type: integer
          example: 1
        userId:
          description: Unique user identifier.
          type: integer
          example: 1
            
          
          
tags:
  - name: photo
    description: Everything about your photos

  - name: user
    description: Operations about user          
          
          
    
paths:
  /session:
    post:
      tags: ["login"]
      summary: Logs in the user
      description: |-
        If the user does not exist, it will be created,
        and an identifier is returned.
        If the user exists, the user identifier is returned.
      operationId: doLogin
      requestBody:
        description: User details
        content:
          application/json:
            schema: 
              description: username for the user to be logged in or signed up
              type: string
              example: SiweiHu
              pattern: '^.*?$'
              minLength: 3
              maxLength: 16
              
        required: true
      responses:
        '201':
          description: User signed-in action successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '200':
          description: user log-in seccessfully
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }            
      
                
  
  /users/{username}/homepage:
    parameters:
      - $ref:  "#/components/parameters/username"
    get:
      security:
        - bearerAuth: []         # use the same name as above
      tags:
        - photo
      operationId: getMyStream
      summary: returns a stream of photos
      description: |
        the returned stream of photos is in reverse chronogical order and it's 
        from the followed users
      responses:
        '200':
          description: stream of photos successfully obtained
          content:
            application/json:
              schema:
                description: an array of photos retrieved
                type: array
                items: { $ref: "#/components/schemas/Photo"}
                minItems: 0
                maxItems: 99999
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
              
  
  /users/{username}/profile:
    parameters:
       - $ref: "#/components/parameters/username"
    
    get:
      security:
        - bearerAuth : []
      tags:
        - user
      operationId: getUserProfile
      summary: returns the profile of the user
      description: | 
        the returned profile shows photos, number of photos uploaded, followers and following
      
      responses:
        '200':
          description: profile informations successfully obtained
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Profile"}
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '403': { $ref: "#/components/responses/StatusForbidden" }
  
  /users/{username}:
    parameters:
       - $ref: "#/components/parameters/username"

    put:
      security:
        - bearerAuth: []
      tags:
        - user
      operationId: setMyUserName
      summary: set the username specified by the userin the request
      description: |
        receive in input a valid string and check first if the name already exists then set the new username
      requestBody:
        content:
          application/json:
            schema: 
                description: the new username to be set up
                type: string
                example: SiweiHu
                pattern: '^.*?$'
                minLength: 3
                maxLength: 16
      responses:
        "201":
          description: Username updated successfully
          content:
            application/json:
              schema: 
                description: new username
                type: string
                example: SiweiHu
                pattern: '^.*?$'
                minLength: 3
                maxLength: 16
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
        
  
  
  
  
  
  /users/{username}/photos/:
    parameters: 
      - $ref: "#/components/parameters/username"
    
    get:
      security:
        - bearerAuth: []
      tags:
        - photo
      operationId: getUserPhoto
      summary: get user's photo that he have uploaded
      description: |
          getting all photos of this user have uploaded including all details about the photo
      responses:
        '200':
          description: photo of the user retrieved
          content:
            application/json:
              schema:
                description: array of photos retrieved
                type: array
                items: { $ref: "#/components/schemas/Photo"}
                minItems: 0
                maxItems: 99999
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
        '403': { $ref: "#/components/responses/StatusForbidden" }
      
      
      
    post:
      security:
        - bearerAuth: []
      tags:
        - photo
      operationId : uploadPhoto
      summary: upload a new photo
      description: |
        adding a new photo with a new id created
        actually a user can upload the same picture twice or multiple time but each photo will have a different id
      requestBody:
        required: true
        content:
          image/*:
            schema:
              description: Image schema
              type: object
              properties:
                file:
                  description: file of image
                  type: string
                  format: binary
                  minLength: 0
                  maxLength: 99999
      responses:
        '201':
          description: new photo uloaded successfully
          content:
            application/json: 
              schema: { $ref: "#/components/schemas/Photo"}
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
    
          
  
  /users/{username}/photos/{pid}: 
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/pid"
    
    
    delete:
      security:
        - bearerAuth: []
      tags:
        - photo
      operationId: deletePhoto
      summary: delete a photo
      description: |
        delete a photo with the corrisponding id from user's own profile
      responses:
        "204": 
          description: Photo deleted successfully 
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }

  
  /users/{username}/photos/{pid}/likes:
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/pid"
    
    get:
      security:
        - bearerAuth: []
      tags:
        - photo
      operationId: getPhotoLikes
      summary: get photo's like list
      description: |
          getting all likes of this photo
      responses:
        '200':
          description: likes of the photo retrieved
          content:
            application/json:
              schema:
                description: array of users that liked the corrisponding photo
                type: array
                items: { $ref: "#/components/schemas/Like"}
                minItems: 0
                maxItems: 99999
    
      
  /users/{username}/photos/{pid}/likes/{likeUsername}:
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/pid"
      - $ref: "#/components/parameters/likeUsername"
                
    put:
      security:
          - bearerAuth: []
      tags:
        - photo
      operationId: likePhoto
      summary: put a like to a photo
      description: id of the user of like will be added to the collection likes
      responses:
        '201':
          description:  operation successfull
          content:
            application/json:
              schema: { $ref : "#/components/schemas/User"}
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
              
              
    delete:
      security:
          - bearerAuth: []
      tags:
        - photo
      operationId: unlikePhoto
      summary: remove a like to a photo
      description: id of the user will be deleted from the collection likes
      responses:
        '204':
          description:  operation successfull
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
          
  /users/{username}/following/:
    parameters: 
      - $ref: "#/components/parameters/username"
      
    get:
      security:
        - bearerAuth: []
      tags:
        - user
      operationId: listFollowed
      summary: get user's follow list
      description: |
          getting all followers of this user, user objects will be returned
      responses:
        '200':
          description: follow list of the user retrieved
          content:
            application/json:
              schema:
                description: array og users that the user is following
                type: array
                items: { $ref: "#/components/schemas/User"}
                minItems: 0
                maxItems: 99999
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
        '403': { $ref: "#/components/responses/StatusForbidden" }
        
  /users/{username}/following/{followUsername}: 
    parameters:
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/followUsername"
    put:
      security:
          - bearerAuth: []
      tags:
        - user
      operationId: followUser
      summary: follow a user
      description: id of the user to follow will be added to the collection following
      responses:
        '201':
          description:  operation successfull
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Follow"}
              
    delete:
      security:
          - bearerAuth: []
      tags:
        - user
      operationId: unfollowUser
      summary: remove a user from following
      description: id of the user will be deleted from the collection following
      responses:
        '204':
          description:  operation successfull
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
          

          
  /users/{username}/photos/{pid}/comments/:
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/pid"
      
    post:
      security:
        - bearerAuth: []
      tags:
        - photo
      operationId : commentPhoto
      summary: add comment to a photo
      description: |
        adding a new comment to a photo
      requestBody:
        content:
          application/json:
            schema: { $ref : "#/components/schemas/Comment"}
      responses:
        '201':
          description: new comment added successfully
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Comment"}
    
    get:
      security:
        - bearerAuth: []
      tags:
        - photo
      operationId: getPhotoComments
      summary: get photo's comment list
      description: |
          getting all comments of this photo
      responses:
        '200':
          description: photo of the user retrieved
          content:
            application/json:
              schema:
                description: array of comments of the corrisponding photo
                type: array
                items: { $ref: "#/components/schemas/Comment"}
                minItems: 0
                maxItems: 99999
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
        '403': { $ref: "#/components/responses/StatusForbidden" }
                
  
  /users/{username}/photos/{pid}/comments/{cid}:
  
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/pid"
      - $ref: "#/components/parameters/cid"
      
    delete:
      security:
          - bearerAuth: []
      tags:
        - photo
      operationId: uncommentPhoto
      summary: remove a comment to a photo
      description: cid of the comment will be deleted from the collection comments
      responses:
        '204':
          description:  operation successfull
          

  /users/{username}/banned/:
    parameters: 
      - $ref: "#/components/parameters/username"
      
    get:
      security:
        - bearerAuth: []
      tags:
        - user
      operationId: listBanned
      summary: get user's ban list
      description: |
          getting all banned user of this user
      responses:
        '200':
          description: ban list of the user retrieved
          content:
            application/json:
              schema:
                description: array of users that are banned by the user
                type: array
                items: { $ref: "#/components/schemas/User"}
                minItems: 0
                maxItems: 99999
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }
        '403': { $ref: "#/components/responses/StatusForbidden" }
                
    
  /users/{username}/banned/{banUsername}:
    parameters: 
      - $ref: "#/components/parameters/username"
      - $ref: "#/components/parameters/banUsername"
    
    put:
      security:
          - bearerAuth: []
      tags:
        - user
      operationId: banUser
      summary: ban a user
      description: id of the user to ban will be added to the collection banned
      responses:
        '201':
          description:  operation successfull
          content:
            application/json:
              schema: { $ref : "#/components/schemas/Ban"}
              
    delete:
      security:
          - bearerAuth: []
      tags:
        - user
      operationId: unbanUser
      summary: remove a user from banned
      description: id of the user will be deleted from the collection banned
      responses:
        '204':
          description:  operation successfull
        '401': { $ref: "#/components/responses/UnauthorizedStatus" }
        '400': { $ref: "#/components/responses/BadRequestError" }
        '500': { $ref: "#/components/responses/InternalServerError" }
        '404': { $ref: "#/components/responses/NotFoundError" }

              
              
              
              
              
              
              
                
              
              
# 